# -*- coding: utf-8 -*-
"""task 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q0dHB8gDcI3K5jzHNKfiW0s3yEqUURjh
"""

# svm_classification.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report, confusion_matrix

# Load data
df = pd.read_csv("breast-cancer.csv")

# Drop unnecessary column
df = df.drop(columns=["id"])

# Encode target
le = LabelEncoder()
df['diagnosis'] = le.fit_transform(df['diagnosis'])  # M=1, B=0

# Split features and target
X = df.drop(columns=['diagnosis'])
y = df['diagnosis']

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# PCA for 2D visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train SVM - Linear Kernel
svc_linear = SVC(kernel='linear')
svc_linear.fit(X_train, y_train)

# Train SVM - RBF Kernel
svc_rbf = SVC(kernel='rbf')
svc_rbf.fit(X_train, y_train)

# Evaluate
print("Linear SVM Report:\n", classification_report(y_test, svc_linear.predict(X_test)))
print("RBF SVM Report:\n", classification_report(y_test, svc_rbf.predict(X_test)))

# Grid search for hyperparameter tuning
params = {'C': [0.1, 1, 10], 'gamma': ['scale', 0.01, 0.1]}
grid = GridSearchCV(SVC(kernel='rbf'), param_grid=params, cv=5)
grid.fit(X_scaled, y)
print("Best Params from Grid Search:", grid.best_params_)

# Cross-validation score
scores = cross_val_score(SVC(kernel='rbf', **grid.best_params_), X_scaled, y, cv=5)
print("Cross-Validation Accuracy: %.2f%%" % (scores.mean() * 100))

# Plotting decision boundaries using PCA components
def plot_decision_boundary(model, X, y, title):
    h = .02
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    model.fit(X, y)
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt

